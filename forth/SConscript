#! /usr/bin/env python

import os

Import('ENV')

E = ENV.FullClone(
  LINKER_SCRIPT = File('forth.ld').abspath
)

E.Append(INCLUDE = '-I %s' % Dir('#forth').abspath)

E.Append(DEFS = ['-D__BUILD_STAMP__=$BUILD_STAMP'])

#E.PassVarAsDefine('BUILD_STAMP', to_boolean = False)
E.PassVarAsDefine('FORTH_DEBUG')
E.PassVarAsDefine('FORTH_DEBUG_FIND')
E.PassVarAsDefine('FORTH_DIE_ON_UNDEF')

object_files = [ 'ducky-forth.o' ]

# C code
c_lib_files = ['boot', 'errors', 'forth', 'input', 'math', 'number', 'string', 'tty']
c_word_files = ['compile', 'env', 'interpret', 'number', 'output', 'system']

for f in c_lib_files:
  dst, src = os.path.join('lib', f + '.o'), os.path.join('lib', f + '.c')

  E.DuckyObjFromC(dst, source = src)
  object_files.append(dst)

for f in c_word_files:
  dst, src = os.path.join('words', f + '.o'), os.path.join('words', f + '.c')

  E.DuckyObjFromC(dst, source = src)
  object_files.append(dst)

# Assembly code
E.DuckyObjFromAsm('boundaries-post.o', source = 'boundaries-post.s')
E.DuckyObjFromAsm('ducky-forth.o', source = 'ducky-forth.s')

# boundaries must be last
object_files += ['boundaries-post.o']

# Dependency tree
E.ReadExternalDeps()

E.DuckyBinary('ducky-forth', source = object_files)
E.Alias('forth', File('ducky-forth'))

set_options = [
  'bootloader:file=%s' % File('ducky-forth').abspath,
  'device-3:streams_in=%s' % File('ducky-forth.f').abspath,
  'device-3:stream_out="<stderr>"',
  'device-3:echo=no',
]

add_options = [
  'device-3:streams_in="<stdin>"'
]

E.Command('.running-forth', File('ducky-forth'), E.DuckyRun(config = File('forth.conf'), set_options = set_options, add_options = add_options, environ = {'PYTHONUNBUFFERED': 'yes'}))
E.Alias('run-forth', '.running-forth')

E.OnClean('forth')
E.Help("""
  ${GREEN}FORTH:${CLR}
     ${BLUE}'scons forth'${CLR} to build basic FORTH kernel,
     ${BLUE}'scons run-forth'${CLR} to run FORTH,
""")
