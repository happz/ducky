#! /usr/bin/env python

import os
import sys

if os.environ.get('DUCKY_IMPORT_DEVEL', 'no') == 'yes':
  sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

import optparse
import signal

import ducky.patch
import ducky.config
import ducky.console
import ducky.log
import ducky.machine
import ducky.util
import ducky.profiler
import ducky.snapshot

def main():
  parser = optparse.OptionParser()

  ducky.util.add_common_options(parser)

  # Machine configuration
  opt_group = optparse.OptionGroup(parser, 'Machine hardware')
  parser.add_option_group(opt_group)
  opt_group.add_option('--machine-config',
                       dest = 'machine_config',
                       action = 'store',
                       default = None,
                       help = 'Path to machine configuration file')
  opt_group.add_option('--machine-out',
                       dest = 'machine_out',
                       action = 'store',
                       default = None,
                       metavar = 'FILE',
                       help = 'Log machine output into FILE')
  opt_group.add_option('--machine-in',
                       dest = 'machine_in',
                       action = 'append',
                       default = [],
                       metavar = 'FILE',
                       help = 'Read machine input from FILE')
  opt_group.add_option('--conio-echo',
                       dest = 'conio_echo',
                       action = 'store',
                       type = 'choice',
                       choices = ['yes', 'no'],
                       default = 'yes')
  opt_group.add_option('--conio-console',
                       dest = 'conio_console',
                       action = 'store',
                       type = 'choice',
                       choices = ['yes', 'no'],
                       default = 'yes')
  opt_group.add_option('--conio-highlight',
                       dest = 'conio_highlight',
                       action = 'store',
                       type = 'choice',
                       choices = ['yes', 'no'],
                       default = 'no')
  opt_group.add_option('--conio-stdout-echo',
                       dest = 'conio_stdout_echo',
                       action = 'store',
                       type = 'choice',
                       choices = ['yes', 'no'],
                       default = 'no')
  opt_group.add_option('--machine-profile',
                       dest = 'machine_profile',
                       action = 'store_true',
                       default = False,
                       help = 'Enable profiling of running binaries')

  # Debug options
  opt_group = optparse.OptionGroup(parser, 'Debug options')
  parser.add_option_group(opt_group)
  opt_group.add_option('-g', '--go-on',
                       dest = 'go_on',
                       action = 'store_true',
                       default = False,
                       help = 'Don\'t wait for user to start binaries with pressing Enter')
  opt_group.add_option('-p', '--profile',
                       dest = 'profile',
                       action = 'store_true',
                       default = False,
                       help = 'Enable profiling of the whole virtual machine')
  opt_group.add_option('-P', '--profile-dir',
                       dest = 'profile_dir',
                       action = 'store',
                       default = None,
                       help = 'Store profiling data in this directory')

  options, logger = ducky.util.parse_options(parser)

  if options.profile:
    ducky.profiler.STORE.enable_machine()

  if options.machine_profile:
    ducky.profiler.STORE.enable_cpu()

  main_profiler = ducky.profiler.STORE.get_machine_profiler()
  main_profiler.enable()

  M = ducky.machine.Machine()

  machine_config = ducky.config.MachineConfig()
  machine_config.read(options.machine_config)

  M.hw_setup(machine_config,
             machine_in = options.machine_in,
             machine_out = options.machine_out)

  M.conio.stdout_echo = True if options.conio_stdout_echo == 'yes' else False
  M.conio.echo = True if options.conio_echo == 'yes' else False
  M.conio.open_console = True if options.conio_console == 'yes' else False
  M.conio.highlight = True if options.conio_highlight == 'yes' else False

  def signal_handler(sig, frame):
    if sig == signal.SIGUSR1:
      logger.info('VM suspended by user')
      M.reactor.add_call(M.suspend)

    elif sig == signal.SIGUSR2:
      logger.info('VM unsuspended by user')
      M.reactor.add_call(M.wake_up)

    elif sig == signal.SIGINT:
      logger.info('VM halted by user')
      M.reactor.add_call(M.halt)

    elif sig == signal.SIGSEGV:
      logger.info('VM snapshot requested')
      M.reactor.add_call(M.snapshot('ducky-snapshot-user.bin'))

  signal.signal(signal.SIGINT,  signal_handler)
  signal.signal(signal.SIGUSR1, signal_handler)
  signal.signal(signal.SIGUSR2, signal_handler)
  signal.signal(signal.SIGSEGV, signal_handler)

  M.boot()

  if not options.go_on:
    logger.info('Press Enter to start execution of loaded binaries')
    input()

  M.run()  # reactor loop!

  state = ducky.snapshot.VMState.capture_vm_state(M, suspend = False)
  state.save('ducky-snapshot.bin')
  logger.info('VM snapshot save in ducky-snapshot.bin')

  table_exits = [
    ['Core', 'Exit code']
  ]

  table_inst_caches = [
    ['Core', 'Reads', 'Inserts', 'Hits', 'Misses', 'Prunes']
  ]
  table_data_caches = [
    ['Core', 'Reads', 'Inserts', 'Hits', 'Misses', 'Prunes']
  ]

  def __check_stats(core):
    table_exits.append([str(core), core.exit_code])

    table_inst_caches.append([
      str(core),
      core.instruction_cache.reads,
      core.instruction_cache.inserts,
      core.instruction_cache.hits,
      core.instruction_cache.misses,
      core.instruction_cache.prunes
    ])

    table_data_caches.append([
      str(core),
      core.data_cache.reads,
      core.data_cache.inserts,
      core.data_cache.hits,
      core.data_cache.misses,
      core.data_cache.prunes
    ])

  map(__check_stats, M.cores())

  logger.info('Exit codes')
  logger.table(table_exits)
  logger.info('')
  logger.info('Instruction caches')
  logger.table(table_inst_caches)
  logger.info('')
  logger.info('Data caches')
  logger.table(table_data_caches)
  logger.info('')

  main_profiler.disable()

  if options.profile or options.machine_profile:
    logger.info('Saving profiling data into %s' % options.profile_dir)
    ducky.profiler.STORE.save(options.profile_dir)

  sys.exit(M.exit_code)

if __name__ == '__main__':
  main()
