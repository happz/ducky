#! /usr/bin/env python

import optparse
import os
import signal
import sys
import time
import threading

import cpu
import cpu.assemble
import console
import core
import irq
import irq.timer
import irq.conio
import io_handlers
import io_handlers.conio
import mm
import util
import machine

from util import *

def main():
  parser = optparse.OptionParser()

  parser.add_option('-v', dest = 'verbosity', action = 'count', default = 0, help = 'Verbosity level')
  parser.add_option('-D', dest = 'debug', action = 'store_true', default = False, help = 'Debug mode')
  parser.add_option('-l', dest = 'logfile', help = 'Log file')

  parser.add_option('-c', dest = 'cpus', action = 'store', default = 1, help = 'Number of CPUs')
  parser.add_option('-t', dest = 'cores', action = 'store', default = 1, help = 'Number of cores per CPU')
  parser.add_option('-s', dest = 'storages', action = 'append', help = 'Storage devices')

  parser.add_option('-b', dest = 'bin_in', action = 'append', default = None, help = 'Binary file to run')

  parser.add_option('--breakpoint', dest = 'breakpoints', action = 'append', default = [], help = 'Insert breakpoint at address')

  parser.add_option('-i', dest = 'irq_routines', default = None, help = 'Bytecode file with IRQ routines')

  options, args = parser.parse_args()

  M = machine.Machine()

  util.CONSOLE = console.Console(M, sys.stdin, sys.stdout)
  util.CONSOLE.boot()
  util.CONSOLE.set_verbosity(options.verbosity)

  if options.logfile:
    util.CONSOLE.set_logfile(options.logfile)

  M.hw_setup(cpus = int(options.cpus), cores = int(options.cores),
             binaries = options.bin_in,
             storages = options.storages,
             irq_routines = options.irq_routines,
             breakpoints = options.breakpoints)

  def signal_handler(sig, frame):
    if sig == signal.SIGUSR1:
      info('VM suspended by user')
      M.suspend()

    elif sig == signal.SIGUSR2:
      info('VM unsuspended by user')
      M.wake_up()

    elif sig == signal.SIGINT:
      info('VM halted by user')
      M.halt()

    elif sig == signal.SIGSEGV:
      info('Generate VM coredump')

      state = core.VMState.capture_vm_state(M)

      filename = '/tmp/ducky-core.%s' % os.getpid()
      state.save(filename)

  signal.signal(signal.SIGINT,  signal_handler)
  signal.signal(signal.SIGUSR1, signal_handler)
  signal.signal(signal.SIGUSR2, signal_handler)
  signal.signal(signal.SIGSEGV, signal_handler)
  signal.signal(signal.SIGPIPE, signal_handler)

  M.boot()

  if options.debug:
    info('Enter "run" to start execution of loaded binaries')

  else:
    info('Press Enter to start execution of loaded binaries')
    util.CONSOLE.wait_on_line()

    M.run()

  while not M.thread or M.thread.is_alive():
    time.sleep(cpu.CPU_SLEEP_QUANTUM * 10)

if __name__ == '__main__':
  main()

