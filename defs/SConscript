#! /usr/bin/env python

import os
from functools import partial
from mako.template import Template
from six import print_

Import('ENV', 'DuckyCommand')

def __create_define_file(env, src, dst):
  def _X(i, padding = None):
    padding = ('0' + str(padding)) if padding is not None else ''
    return ('0x%' + padding + 'X') % i

  X = _X
  X2 = partial(_X, padding = 2)
  X4 = partial(_X, padding = 4)
  X8 = partial(_X, padding = 8)

  import sys
  sys.path = ['.'] + sys.path

  with open(src, 'r') as f_in:
    with open(dst, 'w') as f_out:
      print_(Template(f_in.read()).render(X = X, X2 = X2, X4 = X4, X8 = X8), file = f_out)

  sys.path.pop(0)

  return ''

def create_define_file(source, target, env):
  cmd = DuckyCommand(env)
  cmd.command = env.subst('$VIRTUAL_ENV/bin/ducky-defs -i {source} -o {target}'.format(source = str(source[0]), target = str(target[0])))

  if 'COVERAGEDIR' in env:
    cmd.wrap_by_coverage(env)

  return cmd.run(env, 'DEFINE', target[0])

E = ENV.FullClone(
  BUILDERS = {
    'DuckyDefine': Builder(action = create_define_file)
  }
)

DEFINES = [E.DuckyDefine(os.path.splitext(str(source))[0], source = source) for source in Glob('*.asm.in')]
defines = E.Alias('defines', DEFINES)

Export('DEFINES')

E.OnClean(defines)
E.Help("""     ${BLUE}'scons defines'${CLR} to build assembly include files,\n""")
